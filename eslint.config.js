import js from "@eslint/js"
import eslintConfigPrettier from "eslint-config-prettier"
import { importX } from "eslint-plugin-import-x"
import globals from "globals"
import tseslint from "typescript-eslint"

export default tseslint.config([
    {
        ignores: [
            // Logs
            "**/logs",
            "**/*.log",
            "**/npm-debug.log*",
            "**/yarn-debug.log*",
            "**/yarn-error.log*",
            "**/lerna-debug.log*",
            // Diagnostic reports (https://nodejs.org/api/report.html)
            "**/report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json",
            // Runtime data
            "**/pids",
            "**/*.pid",
            "**/*.seed",
            "**/*.pid.lock",
            // Directory for instrumented libs generated by jscoverage/JSCover
            "**/lib-cov",
            // Coverage directory used by tools like istanbul
            "**/coverage",
            "**/*.lcov",
            // nyc test coverage
            "**/.nyc_output",
            // Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
            "**/.grunt",
            // Bower dependency directory (https://bower.io/)
            "**/bower_components",
            // node-waf configuration
            "**/.lock-wscript",
            // Compiled binary addons (https://nodejs.org/api/addons.html)
            "build/Release",
            // Dependency directories
            "**/node_modules/",
            "**/jspm_packages/",
            // TypeScript v1 declaration files
            "**/typings/",
            // TypeScript cache
            "**/*.tsbuildinfo",
            // Optional npm cache directory
            "**/.npm",
            // Optional eslint cache
            "**/.eslintcache",
            // Microbundle cache
            "**/.rpt2_cache/",
            "**/.rts2_cache_cjs/",
            "**/.rts2_cache_es/",
            "**/.rts2_cache_umd/",
            // Optional REPL history
            "**/.node_repl_history",
            // Output of 'npm pack'
            "**/*.tgz",
            // Yarn Integrity file
            "**/.yarn-integrity",
            // dotenv environment variables file
            "**/.env",
            "**/.env.test",
            // parcel-bundler cache (https://parceljs.org/)
            "**/.cache",
            // Next.js build output
            "**/.next",
            // Nuxt.js build / generate output
            "**/.nuxt",
            "**/dist",
            // Gatsby files
            "**/.cache/",
            // Comment in the public line in if your project uses Gatsby and *not* Next.js
            // https://nextjs.org/blog/next-9-1#public-directory-support
            // '**/public',
            // vuepress build output
            ".vuepress/dist",
            // Serverless directories
            "**/.serverless/",
            // FuseBox cache
            "**/.fusebox/",
            // DynamoDB Local files
            "**/.dynamodb/",
            // TernJS port file
            "**/.tern-port",
            // scratch pad file
            "**/scratchpad.ts",
        ],
    },
    js.configs.recommended,
    importX.flatConfigs.recommended,
    importX.flatConfigs.typescript,
    tseslint.configs.strictTypeChecked,
    eslintConfigPrettier,
    tseslint.configs.stylisticTypeChecked.map((c) => ({
        ...c,
        rules: Object.fromEntries(
            Object.entries(c.rules ?? {}).map((v) =>
                v[1] == "error" ? [v[0], "warn"] : v
            )
        ),
    })),
    {
        languageOptions: {
            globals: {
                ...globals.node,
            },

            parser: tseslint.parser,
            parserOptions: {
                project: ["./tsconfig.json"],
            },
        },

        settings: {
            "import-x/parsers": {
                "@typescript-eslint/parser": [".ts", ".tsx"],
            },

            "import-x/resolver": {
                typescript: {
                    alwaysTryTypes: true,
                },
            },
        },

        rules: {
            "default-case-last": "error",
            "no-await-in-loop": "error",
            "no-return-assign": "error",
            "no-self-compare": "error",
            "no-sequences": ["error", { allowInParentheses: false }],
            "no-useless-concat": "error",
            "require-unicode-regexp": "error",

            "@typescript-eslint/no-use-before-define": "error",
            "@typescript-eslint/no-unsafe-member-access": "warn",
            "@typescript-eslint/no-unsafe-call": "warn",
            "@typescript-eslint/no-unsafe-return": "warn",

            "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                    allowNumber: true,
                    allowBoolean: true,
                },
            ],

            curly: ["warn", "all"],
            "no-else-return": "warn",
            "no-lonely-if": "warn",
            "no-useless-return": "warn",
            "no-var": "warn",
            "object-shorthand": "warn",
            "prefer-const": "warn",
            "prefer-template": "warn",

            yoda: [
                "warn",
                "never",
                {
                    onlyEquality: true,
                },
            ],
            "no-restricted-syntax": [
                "warn",
                {
                    selector: 'BinaryExpression[operator=">"]',
                    message:
                        "Comparisons should use `<` so the reading order is smaller to larger.",
                },
            ],

            "import-x/no-useless-path-segments": "warn",

            "import-x/order": [
                "warn",
                {
                    alphabetize: {
                        order: "asc",
                    },
                },
            ],

            "@typescript-eslint/no-unused-vars": "warn",
            "@typescript-eslint/prefer-string-starts-ends-with": "warn",
            "import-x/no-unresolved": "off",
            "import-x/no-named-as-default-member": "off",
        },
    },
])
